{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dno\\\\Desktop\\\\pu-web\\\\src\\\\components\\\\pages\\\\login\\\\LoginEnterSmsCode.js\";\nimport React from 'react';\nimport AppBarHome from \"../home/AppBarHome\";\nimport HomeFooter from \"../home/HomeFooter\";\nimport TFString from \"../../inputs/TFString\";\nimport CheckSmsCodeButtonLarge from \"../../buttons/CheckSmsCodeButtonLarge\";\nimport ResendSmsCodeButton from \"../../buttons/ResendSmsCodeButton\";\nimport { Redirect } from 'react-router-dom';\nimport axios from \"axios\";\nimport { api_endpoint } from \"../../../settings\";\nconst loginHolder = {\n  marginTop: \"100px\",\n  width: \"300px\"\n};\nconst wrapper = {\n  display: \"flex\",\n  justifyContent: \"center\"\n};\nconst hintStyle = {\n  textAlign: \"left\",\n  fontSize: \"14px\",\n  fontFamily: \"ProximaNova, sans-serif\",\n  fontWeight: \"bold\",\n  marginTop: \"20px\",\n  marginBottom: \"0\",\n  marginLeft: \"30px\",\n  opacity: \"0.6\"\n};\nconst spacer = {\n  height: \"40px\",\n  width: \"100%\"\n};\nexport default class LoginEnterSmsCode extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSmsCheckResponse = resp => {\n      if (resp.status === 'OK') {\n        sessionStorage.setItem('key', resp.response.key);\n        this.setState({\n          dashboardRedirect: true\n        });\n      } else {\n        this.setState({\n          dashboardRedirect: false\n        }); //show errors\n      }\n    };\n\n    this.startCounter = () => {\n      let newCounter = this.state.counter - 1;\n\n      if (newCounter >= 0) {\n        setTimeout(() => {\n          this.setState({\n            counter: newCounter\n          });\n          this.startCounter();\n        }, 1000);\n      }\n    };\n\n    let intViewportHeight = window.innerHeight - 458;\n    this.state = {\n      divHeight: intViewportHeight,\n      dashboardRedirect: false,\n      counter: 60\n    };\n    this.tf_smscode = React.createRef();\n    this.startCounter();\n  }\n\n  generateLoginHolderStyle() {\n    return {\n      minHeight: this.state.divHeight\n    };\n  }\n\n  render() {\n    if (!this.state.dashboardRedirect) {\n      return React.createElement(\"div\", {\n        style: loginHolder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: hintStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Input SMS code\"), React.createElement(TFString, {\n        tf_required: \"required\",\n        tf_variant: \"outlined\",\n        tf_margin: \"normal\",\n        tf_default_value: \"\",\n        tf_enabled: \"true\",\n        tf_max_width: \"255px\",\n        ref: this.tf_smscode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: spacer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(CheckSmsCodeButtonLarge, {\n        etSmsCodeRef: this.tf_smscode,\n        smsCodeCheckHandler: this.handleSmsCheckResponse,\n        key: sessionStorage.getItem('key'),\n        token: sessionStorage.getItem('token'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), this.state.counter === 0 ? React.createElement(ResendSmsCodeButton, {\n        resendSMS: this.props.reSendSMS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }) : 'You can resend new code via ' + this.state.counter);\n    } else {\n      return React.createElement(Redirect, {\n        push: true,\n        to: \"/dashboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Dno/Desktop/pu-web/src/components/pages/login/LoginEnterSmsCode.js"],"names":["React","AppBarHome","HomeFooter","TFString","CheckSmsCodeButtonLarge","ResendSmsCodeButton","Redirect","axios","api_endpoint","loginHolder","marginTop","width","wrapper","display","justifyContent","hintStyle","textAlign","fontSize","fontFamily","fontWeight","marginBottom","marginLeft","opacity","spacer","height","LoginEnterSmsCode","Component","constructor","props","handleSmsCheckResponse","resp","status","sessionStorage","setItem","response","key","setState","dashboardRedirect","startCounter","newCounter","state","counter","setTimeout","intViewportHeight","window","innerHeight","divHeight","tf_smscode","createRef","generateLoginHolderStyle","minHeight","render","getItem","reSendSMS"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport AppBarHome from \"../home/AppBarHome\";\r\nimport HomeFooter from \"../home/HomeFooter\";\r\nimport TFString from \"../../inputs/TFString\";\r\nimport CheckSmsCodeButtonLarge from \"../../buttons/CheckSmsCodeButtonLarge\";\r\nimport ResendSmsCodeButton from \"../../buttons/ResendSmsCodeButton\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport {api_endpoint} from \"../../../settings\";\r\n\r\n\r\nconst loginHolder = {\r\n    marginTop: \"100px\",\r\n    width: \"300px\",\r\n};\r\n\r\nconst wrapper = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\"\r\n}\r\n\r\nconst hintStyle = {\r\n    textAlign: \"left\",\r\n    fontSize: \"14px\",\r\n    fontFamily: \"ProximaNova, sans-serif\",\r\n    fontWeight: \"bold\",\r\n    marginTop: \"20px\",\r\n    marginBottom: \"0\",\r\n    marginLeft: \"30px\",\r\n    opacity: \"0.6\"\r\n};\r\n\r\nconst spacer = {\r\n    height: \"40px\",\r\n    width: \"100%\"\r\n};\r\n\r\n\r\n\r\nexport default class LoginEnterSmsCode extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let intViewportHeight = window.innerHeight - 458;\r\n        this.state = {\r\n            divHeight: intViewportHeight,\r\n            dashboardRedirect: false,\r\n            counter: 60\r\n        };\r\n        this.tf_smscode = React.createRef();\r\n        this.startCounter()\r\n\r\n    }\r\n\r\n    generateLoginHolderStyle() {\r\n        return {\r\n            minHeight: this.state.divHeight,\r\n        }\r\n    }\r\n\r\n\r\n    handleSmsCheckResponse = (resp) => {\r\n        if(resp.status === 'OK') {\r\n            sessionStorage.setItem('key', resp.response.key);\r\n            this.setState({dashboardRedirect: true});\r\n        }\r\n        else {\r\n            this.setState({dashboardRedirect: false});\r\n            //show errors\r\n        }\r\n    }\r\n\r\n    startCounter = () => {\r\n        let newCounter = this.state.counter-1;\r\n\r\n        if(newCounter >= 0) {\r\n            setTimeout(()=>{\r\n                this.setState({\r\n                    counter: newCounter,\r\n                });\r\n                this.startCounter()\r\n            }, 1000)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.dashboardRedirect) {\r\n            return (\r\n              <div style={loginHolder}>\r\n                  <p style={hintStyle}>Input SMS code</p>\r\n                  <TFString\r\n                    tf_required=\"required\"\r\n                    tf_variant=\"outlined\"\r\n                    tf_margin=\"normal\"\r\n                    tf_default_value=\"\"\r\n                    tf_enabled=\"true\"\r\n                    tf_max_width=\"255px\"\r\n                    ref={this.tf_smscode}\r\n                  />\r\n                  <div style={spacer}/>\r\n                  <CheckSmsCodeButtonLarge\r\n                    etSmsCodeRef={this.tf_smscode}\r\n                    smsCodeCheckHandler={this.handleSmsCheckResponse}\r\n                    key = {sessionStorage.getItem('key')}\r\n                    token = {sessionStorage.getItem('token')}\r\n                  />\r\n                  {this.state.counter===0 ? <ResendSmsCodeButton resendSMS={this.props.reSendSMS} /> : 'You can resend new code via '+this.state.counter}\r\n              </div>\r\n            );\r\n        }\r\n        else {\r\n            return <Redirect push to=\"/dashboard\"/>;\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}