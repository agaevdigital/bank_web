{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dno\\\\Desktop\\\\pu-web\\\\src\\\\components\\\\pages\\\\login\\\\RestorePassword.js\";\nimport React, { Component } from \"react\";\nimport PageLayout from \"../layout/PageLayout\";\nimport PUCustomInput from \"components/common/PUCustomInput\";\nimport { Typography, makeStyles, Box, withStyles } from \"@material-ui/core\";\nimport NumberFormat from \"react-number-format\";\nimport PUPrimaryButton from \"components/common/PUPrimaryButton\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios/index\";\nimport { api_endpoint } from \"settings\";\nimport ResendSmsCodeButton from \"../../buttons/ResendSmsCodeButton\";\nconst styles = {\n  wrap: {\n    width: \"100%\",\n    maxWidth: 330\n  },\n  pageTitle: {\n    fontSize: \"2rem\",\n    textAlign: \"center\",\n    marginBottom: 15\n  },\n  ml20: {\n    marginLeft: 20\n  },\n  btnSend: {\n    display: \"block\",\n    margin: \"auto\"\n  },\n  btn: {\n    height: 30,\n    padding: \"0 20px\"\n  }\n};\n\nfunction getMaskAtIndex(index) {\n  const mask = \" \";\n\n  if (typeof mask === \"string\") {\n    return mask;\n  }\n\n  return mask[index] || \" \";\n}\n\nfunction formatWithPattern(numStr) {\n  const format = \"+# (###) ###-##-##\";\n  let hashCount = 0;\n  const formattedNumberAry = format.split(\"\");\n\n  for (let i = 0, ln = format.length; i < ln; i++) {\n    if (format[i] === \"#\") {\n      formattedNumberAry[i] = numStr[hashCount] || getMaskAtIndex(hashCount);\n      hashCount += 1;\n    }\n  }\n\n  return formattedNumberAry.join(\"\");\n}\n\nclass RestorePassword extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      num: \"\",\n      confirmCode: null,\n      code_id: null,\n      user_id: null,\n      createNewPass: false,\n      phone_number_error: null,\n      restore_password_code_error: null,\n      new_password_error: null,\n      new_password: '',\n      repeated_password: '',\n      counter: 0\n    };\n\n    this.setNum = val => {\n      this.setState({\n        num: val\n      });\n    };\n\n    this.inputFieldChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.startCounter = () => {\n      let newCounter = this.state.counter - 1;\n\n      if (newCounter >= 0) {\n        setTimeout(() => {\n          this.setState({\n            counter: newCounter\n          });\n          this.startCounter();\n        }, 1000);\n      }\n    };\n\n    this.sendRestoreSmsCode = () => {\n      let phone_number = this.state.num.replace(/[^+0-9]/gim, \"\");\n      this.setState({\n        phone_number_error: null\n      });\n      axios.post(`${api_endpoint}/restore_password_send_sms_code`, {\n        phone_number\n      }).then(res => {\n        if (res.data.status === \"OK\") {\n          this.setState({ ...res.data.response\n          });\n          this.setState({\n            counter: 60\n          });\n          setTimeout(() => {\n            this.startCounter();\n          }, 100);\n        } else {\n          this.setState({\n            phone_number_error: res.data.errors[0].message\n          });\n        }\n      });\n    };\n\n    this.restoreSmsCodeCheck = () => {\n      let postData = {\n        user_id: this.state.user_id,\n        code_id: this.state.code_id,\n        code: this.state.confirmCode\n      };\n      this.setState({\n        restore_password_code_error: null\n      });\n      axios.post(`${api_endpoint}/restore_password_code_check`, postData).then(res => {\n        if (res.data.status === \"OK\") {\n          this.setState({\n            createNewPass: true\n          });\n        } else {\n          this.setState({\n            restore_password_code_error: res.data.errors[0].message\n          });\n        }\n      });\n    };\n\n    this.validatePass = pass => {\n      const digit = /\\d+/; // oneOrMoreDigit\n\n      const uCL = /[a-z]+/; // oneOrMoreUpperCaseLetter\n\n      const lCL = /[A-Z]+/; // oneOrMoreLowerCaseLetter\n\n      const mLength = 8;\n      return pass.length >= 8 && digit.test(pass) && uCL.test(pass) && lCL.test(pass);\n    };\n\n    this.saveNewPass = () => {\n      let postData = {\n        user_id: +this.state.user_id,\n        code_id: +this.state.code_id,\n        code: +this.state.confirmCode,\n        new_password: this.state.new_password,\n        repeated_password: this.state.repeated_password\n      };\n\n      if (this.state.new_password !== this.state.repeated_password) {\n        this.setState({\n          new_password_error: \"Passwords do not match\"\n        });\n        return;\n      }\n\n      if (!this.validatePass(this.state.new_password)) {\n        this.setState({\n          new_password_error: \"Password must contain at least 8 symbols, at least one letter in upper case, at least one letter in lower case and at least one digit\"\n        });\n        return;\n      }\n\n      axios.post(`${api_endpoint}/restore_password`, postData).then(res => {\n        if (res.data.status === \"OK\") {\n          this.props.history && this.props.history.push(\"/login\");\n        }\n      });\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      user_id,\n      code_id\n    } = this.state;\n    return React.createElement(PageLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.wrap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, this.state.createNewPass && React.createElement(React.Fragment, null, React.createElement(Typography, {\n      className: classes.pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Create new password\"), React.createElement(Typography, {\n      className: classes.ml20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"New password\"), React.createElement(PUCustomInput, {\n      onChange: this.inputFieldChange,\n      value: this.state.new_password,\n      name: \"new_password\",\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), this.state.new_password_error && React.createElement(Typography, {\n      color: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, this.state.new_password_error), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      className: classes.ml20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Repeat password\"), React.createElement(PUCustomInput, {\n      onChange: this.inputFieldChange,\n      value: this.state.repeated_password,\n      name: \"repeated_password\",\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(PUPrimaryButton, {\n      onClick: this.saveNewPass,\n      className: `${classes.btnSend} ${classes.btn}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Confirm\")), !this.state.createNewPass && React.createElement(React.Fragment, null, React.createElement(Typography, {\n      className: classes.pageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Reset password\"), React.createElement(Typography, {\n      className: classes.ml20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Please, input your phone number\"), React.createElement(NumberFormat, {\n      onChange: this.inputFieldChange,\n      value: this.state.num,\n      name: \"num\",\n      format: formatWithPattern,\n      customInput: PUCustomInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), this.state.phone_number_error && React.createElement(Typography, {\n      color: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, this.state.phone_number_error), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), this.state.counter === 0 ? React.createElement(PUPrimaryButton, {\n      onClick: this.sendRestoreSmsCode,\n      className: `${classes.btnSend} ${classes.btn}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Send confirmation code\") : 'You can resend new code via ' + this.state.counter, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      className: `${classes.ml20}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"Input confirmation code from SMS\"), React.createElement(NumberFormat, {\n      onChange: this.inputFieldChange,\n      name: \"confirmCode\",\n      value: this.state.confirmCode,\n      customInput: PUCustomInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), this.state.restore_password_code_error && React.createElement(Typography, {\n      color: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, this.state.restore_password_code_error), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(Box, {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(PUPrimaryButton, {\n      component: Link,\n      to: \"/login\",\n      className: classes.btn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(PUPrimaryButton, {\n      onClick: this.restoreSmsCodeCheck,\n      className: classes.btn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Reset password\")))));\n  }\n\n}\n\nexport default withStyles(styles)(RestorePassword);","map":{"version":3,"sources":["C:/Users/Dno/Desktop/pu-web/src/components/pages/login/RestorePassword.js"],"names":["React","Component","PageLayout","PUCustomInput","Typography","makeStyles","Box","withStyles","NumberFormat","PUPrimaryButton","Link","axios","api_endpoint","ResendSmsCodeButton","styles","wrap","width","maxWidth","pageTitle","fontSize","textAlign","marginBottom","ml20","marginLeft","btnSend","display","margin","btn","height","padding","getMaskAtIndex","index","mask","formatWithPattern","numStr","format","hashCount","formattedNumberAry","split","i","ln","length","join","RestorePassword","state","num","confirmCode","code_id","user_id","createNewPass","phone_number_error","restore_password_code_error","new_password_error","new_password","repeated_password","counter","setNum","val","setState","inputFieldChange","e","target","name","value","startCounter","newCounter","setTimeout","sendRestoreSmsCode","phone_number","replace","post","then","res","data","status","response","errors","message","restoreSmsCodeCheck","postData","code","validatePass","pass","digit","uCL","lCL","mLength","test","saveNewPass","props","history","push","render","classes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PageLayout from \"../layout/PageLayout\";\nimport PUCustomInput from \"components/common/PUCustomInput\";\nimport { Typography, makeStyles, Box, withStyles } from \"@material-ui/core\";\nimport NumberFormat from \"react-number-format\";\nimport PUPrimaryButton from \"components/common/PUPrimaryButton\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios/index\";\nimport { api_endpoint } from \"settings\";\nimport ResendSmsCodeButton from \"../../buttons/ResendSmsCodeButton\";\n\nconst styles = {\n  wrap: {\n    width: \"100%\",\n    maxWidth: 330,\n  },\n  pageTitle: {\n    fontSize: \"2rem\",\n    textAlign: \"center\",\n    marginBottom: 15,\n  },\n  ml20: {\n    marginLeft: 20,\n  },\n  btnSend: {\n    display: \"block\",\n    margin: \"auto\",\n  },\n  btn: {\n    height: 30,\n    padding: \"0 20px\",\n  },\n};\n\nfunction getMaskAtIndex(index) {\n  const mask = \" \";\n  if (typeof mask === \"string\") {\n    return mask;\n  }\n\n  return mask[index] || \" \";\n}\n\nfunction formatWithPattern(numStr) {\n  const format = \"+# (###) ###-##-##\";\n  let hashCount = 0;\n  const formattedNumberAry = format.split(\"\");\n  for (let i = 0, ln = format.length; i < ln; i++) {\n    if (format[i] === \"#\") {\n      formattedNumberAry[i] = numStr[hashCount] || getMaskAtIndex(hashCount);\n      hashCount += 1;\n    }\n  }\n  return formattedNumberAry.join(\"\");\n}\n\nclass RestorePassword extends Component {\n  state = {\n    num: \"\",\n    confirmCode: null,\n    code_id: null,\n    user_id: null,\n    createNewPass: false,\n    phone_number_error: null,\n    restore_password_code_error: null,\n    new_password_error: null,\n    new_password: '',\n    repeated_password: '',\n    counter: 0,\n  };\n  setNum = (val) => {\n    this.setState({ num: val });\n  };\n  inputFieldChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  startCounter = () => {\n    let newCounter = this.state.counter-1;\n\n    if(newCounter >= 0) {\n      setTimeout(()=>{\n        this.setState({\n          counter: newCounter,\n        });\n        this.startCounter()\n      }, 1000)\n    }\n\n  }\n\n  sendRestoreSmsCode = () => {\n    let phone_number = this.state.num.replace(/[^+0-9]/gim, \"\");\n    this.setState({\n      phone_number_error: null,\n    });\n    axios\n      .post(`${api_endpoint}/restore_password_send_sms_code`, { phone_number })\n      .then((res) => {\n        if (res.data.status === \"OK\") {\n          this.setState({ ...res.data.response });\n          this.setState({\n            counter: 60,\n          });\n          setTimeout(()=>{\n            this.startCounter()\n          }, 100)\n\n        } else {\n          this.setState({\n            phone_number_error: res.data.errors[0].message,\n          });\n        }\n      });\n  };\n  restoreSmsCodeCheck = () => {\n    let postData = {\n      user_id: this.state.user_id,\n      code_id: this.state.code_id,\n      code: this.state.confirmCode,\n    };\n    this.setState({\n      restore_password_code_error: null,\n    });\n    axios\n      .post(`${api_endpoint}/restore_password_code_check`, postData)\n      .then((res) => {\n        if (res.data.status === \"OK\") {\n          this.setState({ createNewPass: true });\n        } else {\n          this.setState({\n            restore_password_code_error: res.data.errors[0].message,\n          });\n        }\n      });\n  };\n\n  validatePass = (pass) => {\n    const digit = /\\d+/; // oneOrMoreDigit\n    const uCL = /[a-z]+/; // oneOrMoreUpperCaseLetter\n    const lCL = /[A-Z]+/; // oneOrMoreLowerCaseLetter\n    const mLength = 8;\n\n    return (\n      pass.length >= 8 && digit.test(pass) && uCL.test(pass) && lCL.test(pass)\n    );\n  };\n\n  saveNewPass = () => {\n    let postData = {\n      user_id: +this.state.user_id,\n      code_id: +this.state.code_id,\n      code: +this.state.confirmCode,\n      new_password: this.state.new_password,\n      repeated_password: this.state.repeated_password,\n    };\n\n    if (this.state.new_password !== this.state.repeated_password) {\n      this.setState({ new_password_error: \"Passwords do not match\" });\n      return;\n    }\n\n    if (!this.validatePass(this.state.new_password)) {\n      this.setState({\n        new_password_error:\n          \"Password must contain at least 8 symbols, at least one letter in upper case, at least one letter in lower case and at least one digit\",\n      });\n      return;\n    }\n\n    axios.post(`${api_endpoint}/restore_password`, postData).then((res) => {\n      if (res.data.status === \"OK\") {\n        this.props.history && this.props.history.push(\"/login\");\n      }\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { user_id, code_id } = this.state;\n\n    return (\n      <PageLayout>\n        <div className={classes.wrap}>\n          {this.state.createNewPass && (\n            <>\n              <Typography className={classes.pageTitle}>\n                Create new password\n              </Typography>\n              <Typography className={classes.ml20}>New password</Typography>\n              <PUCustomInput\n                onChange={this.inputFieldChange}\n                value={this.state.new_password}\n                name=\"new_password\"\n                type=\"password\"\n              />\n\n              {this.state.new_password_error && (\n                <Typography color=\"error\">\n                  {this.state.new_password_error}\n                </Typography>\n              )}\n              <br />\n              <br />\n              <Typography className={classes.ml20}>Repeat password</Typography>\n              <PUCustomInput\n                onChange={this.inputFieldChange}\n                value={this.state.repeated_password}\n                name=\"repeated_password\"\n                type=\"password\"\n              />\n              <br />\n              <br />\n              <PUPrimaryButton\n                onClick={this.saveNewPass}\n                className={`${classes.btnSend} ${classes.btn}`}\n              >\n                Confirm\n              </PUPrimaryButton>\n            </>\n          )}\n\n          {!this.state.createNewPass && (\n            <>\n              <Typography className={classes.pageTitle}>\n                Reset password\n              </Typography>\n              <Typography className={classes.ml20}>\n                Please, input your phone number\n              </Typography>\n              <NumberFormat\n                onChange={this.inputFieldChange}\n                value={this.state.num}\n                name=\"num\"\n                format={formatWithPattern}\n                customInput={PUCustomInput}\n              />\n              {this.state.phone_number_error && (\n                <Typography color=\"error\">\n                  {this.state.phone_number_error}\n                </Typography>\n              )}\n              <br />\n              <br />\n\n              {this.state.counter===0 ? <PUPrimaryButton\n                onClick={this.sendRestoreSmsCode}\n                className={`${classes.btnSend} ${classes.btn}`}\n              >\n                Send confirmation code\n              </PUPrimaryButton> : 'You can resend new code via '+this.state.counter}\n              <br />\n              <br />\n              <br />\n              <br />\n              <Typography className={`${classes.ml20}`}>\n                Input confirmation code from SMS\n              </Typography>\n              <NumberFormat\n                onChange={this.inputFieldChange}\n                name=\"confirmCode\"\n                value={this.state.confirmCode}\n                customInput={PUCustomInput}\n              />\n              {this.state.restore_password_code_error && (\n                <Typography color=\"error\">\n                  {this.state.restore_password_code_error}\n                </Typography>\n              )}\n              <br />\n              <br />\n              <Box display=\"flex\" justifyContent=\"space-between\">\n                <PUPrimaryButton\n                  component={Link}\n                  to=\"/login\"\n                  className={classes.btn}\n                >\n                  Cancel\n                </PUPrimaryButton>\n                <PUPrimaryButton\n                  onClick={this.restoreSmsCodeCheck}\n                  className={classes.btn}\n                >\n                  Reset password\n                </PUPrimaryButton>\n              </Box>\n            </>\n          )}\n\n          {/* <PUPrimaryButton onClick={this.saveNewPass} className={classes.btn}>Save PAss</PUPrimaryButton> */}\n        </div>\n      </PageLayout>\n    );\n  }\n}\n\nexport default withStyles(styles)(RestorePassword);\n"]},"metadata":{},"sourceType":"module"}